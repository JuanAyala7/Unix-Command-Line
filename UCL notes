//Command Line Techniques and Directory Navigation

ls : List

ls -a : This allows you to see all of the hidden files.

cd ~ : Users directory

cd : Change directory

up/down : Scroll through your previous commands.
 
cd .. : Allows you to go backwards from your current path/directory.

ctrl + A/E : Takes you to the beginning or the end of the command line.

ctrl + U : Clears your current command line without executing it.

mkdir : Make a directory (folder).


//Creating, Opening, and Removing Files through the Command Line

touch : Used to create, change and modify timestamps of a file.

start : Opens the file within the directory for Windows Users.
Note : 'open' does the same as 'start' but for MacOS Users.

start atom Text1.txt : This allows the user to open a file within a desired application, in this case, it was atom.
^ atom is for Windows Users while -a would be form MacOS Users.

rm : Removes a specific file you'd like to remove from a directory.

pwd : Shows the full path name of your current directory (from the root directory).

rm * : Removes every file within the respective directory.
Note : if you try this command within a directory that consists of only folders, nothing will happen as this commands only removes files.

rm -r : Allows you to remove a directory.
Note : this will also remove all of the folders that are inside the directory (folder) along with all of its child components.

node *file-name.js* : This command would allow you to run the JavaScript code within the respective file ("index.js") in a computer instead of the browser.

node : Allows you to go inside REPL (Read Evaluation Print Loop), which allows you to execute code in bite sized chunks.

Tab button (twice) : This allows Hyper to reveal to you all the possible commands you can use from the point of what you have typed in Hyper. 

atom . : This allows you to open your Express server in atom.

npm install express : This command allows you to install express within the directory.

nodemon is a tool that helps develop Node.js based applications by automatically restarting the node application when file changes in the directory are detected.
nodemon will watch the files in the directory in which nodemon was started, and if any files change, nodemon will automatically restart your node application.
npm install -g nodemon : This command allows you to install nodemon to your respective file/directory.

nodemon *file-name* :  This command allows you to install nodemon as a developement dependency.

//Handling Requests and Responses: the GET Request

const express = require("express");

const app = express();

app.get("/", function(request, response){
  response.send("<h1>Hello, world!</h1>");
});

app.listen(3000, function(){
  console.log("Server started on port3000");
});


heroku create

git push heroku master



//Git, Github and Version Control

git init : This allows you to initialize an empty Git repository within the respective local directory.

git add "file.name" : This allows you to add the file to the staging area which'll allow you to start tracking changes in it.

git commit -m "insert comment/change" : This allows you to commit the file under version control.
Note: the m in "-m" stands for message which is something that helps you keep track of what changes you have made in each commit.
      When you create a new save point, you want to be as explicit as possible about what changes were made b/w the last save point and the current save point.


git status : This allows you to see what's currently inside your staging area, which, will show you the files that are being tracked or are untracked.

git add . : This allows you to specify everything that's inside your current directory.

git log : This allows you to see what commits you have made.

git diff : This allows you to check out the differences b/w the current version of a file to the last save point in your Git repository.

git checkout : This allows you to revert the changes that you've made locally in your working directory.

git remote add origin : This command centralises your source code to the other projects.

git push -u origin master : This will push the changes to the master branch of the primary repository database.

git ignore : This command specifies intentionally untracked files that Git should ignore.

git clone : This command is used to point to an existing repository and make a clone or copy of that repository in a new directory, but in another location.

Working Directory : A process is a directory of a hierarchical file system, if any, dynamically associated with each process.

Staging Area : Files that are going to be a part of the next commit, which lets git know what changes in the file are going to occur for the next commit. 

Master Branch : This is the default branch in Git.

Local Repository :

Remote Repository : These are versions of your project that are hosted on the Internet or network somewhere.

git branch "branch-name" : This command is used to to create a Git branch, be sure to provide a branch name after the command. 

git checkout "branch-name" : This command switch branches or restore working tree files.

git merge "branch-name" :

git push origin master -u :
